package SISv6.Components.SuperController;

import SISv6.Utils.KeyValueList;
import SISv6.Utils.MsgDecoder;
import SISv6.Utils.MsgEncoder;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * This is a legacy SIS SuperController component. Using direct TCP connection with the monolithic server node.
 * You can modify the code according to BasicComponet to change to the rabbitMQ connection.
 */
public class SISSuperController {

	// socket for connection to SISServer
	private static Socket universal;
	private static int port = 53217;
	// message writer
	private static MsgEncoder encoder;
	// message reader
	private static MsgDecoder decoder;

	// scope of this component
	private static final String SCOPE = "SIS.Scope1";
	// name of this component
	private static final String NAME = "SuperController";
	// messages types that can be handled by this component
	private static final List<String> TYPES = new ArrayList<String>(
			Arrays.asList("Setting","Reading","Alert", "Confirm"));

	// summary for all incoming / outgoing messages
	private static final String incomingMessages = "IN\tConfirm|Setting:Kill||Alert:TempAlert|Alert:BloodPressureAlert";
	private static final String outgoingMessages = "OUT\t Connect|Emergency";

	// shared by all kinds of emergencies that can be generated by this component
	private static KeyValueList emergency = new KeyValueList();

	static ArrayList<Double> tempRecord = new ArrayList<Double>();

	private static UserSensorData userSensorData = new UserSensorData();
	private static long TTLforVisit = -1;
	/*
	 * Main program
	 */
	public static void main(String[] args) {
		while (true) {
			try {
				// try to establish a connection to SISServer
				universal = connect();

				// bind the message reader to inputstream of the socket
				decoder = new MsgDecoder(universal.getInputStream());
				// bind the message writer to outputstream of the socket
				encoder = new MsgEncoder(universal.getOutputStream());

				/*
				 * construct a Connect message to establish the connection
				 */
				KeyValueList conn = new KeyValueList();
				conn.putPair("Scope", SCOPE);
				conn.putPair("MessageType", "Connect");
				conn.putPair("IncomingMessages", incomingMessages);
                conn.putPair("OutgoingMessages", outgoingMessages);
				conn.putPair("Role", "Controller");
				conn.putPair("Name", NAME);
				encoder.sendMsg(conn);

				initRecord();

				// KeyValueList for inward messages, see KeyValueList for
				// details
				KeyValueList kvList;

				while (true) {
					// attempt to read and decode a message, see MsgDecoder for
					// details
					kvList = decoder.getMsg();

					// process that message
					ProcessMsg(kvList);
				}

			} catch (Exception e) {
				// if anything goes wrong, try to re-establish the connection
				try {
					// wait for 1 second to retry
					Thread.sleep(1000);
				} catch (InterruptedException e2) {
				}
				System.out.println("Try to reconnect");
				try {
					universal = connect();
				} catch (IOException e1) {
				}
			}
		}
	}

	/*
	 * used for connect(reconnect) to SISServer
	 */
	static Socket connect() throws IOException {
		Socket socket = new Socket("127.0.0.1", port);
		return socket;
	}

	private static void initRecord() {

		emergency.putPair("Scope", SCOPE);
		emergency.putPair("MessageType", "Emergency");
		emergency.putPair("Sender", NAME);

		// Receiver may be different for each message, so it doesn't make sense
		// to set here
		// alert.putPair("Receiver", "RECEIVER");
	}

	/*
	 * process a certain message, execute corresponding actions
	 */
	static void ProcessMsg(KeyValueList kvList) throws IOException {
		System.out.println("Received message:");
		System.out.println(kvList.toString());
		String scope = kvList.getValue("Scope");

		String broadcast = kvList.getValue("Broadcast");
		String direction = kvList.getValue("Direction");

		if(broadcast!=null&&broadcast.equals("True")){

			if(direction!=null&&direction.equals("Up")){
				if(!scope.startsWith(SCOPE)){
					return;
				}
			}else if(direction!=null&&direction.equals("Down")){
				if(!SCOPE.startsWith(scope)){
					return;
				}
			}
		}else{
			if(!SCOPE.equals(scope)){
				return;
			}
		}

		String messageType = kvList.getValue("MessageType");
		if(!TYPES.contains(messageType)){
			return;
		}

		String sender = kvList.getValue("Sender");

		String receiver = kvList.getValue("Receiver");

		String purpose = kvList.getValue("Purpose");

		switch (messageType) {
		case "Reading":
			switch(sender){
				case "BloodPressure":
					try {
						userSensorData.dias = Integer.parseInt(kvList.getValue("Diastolic"));
						userSensorData.syst = Integer.parseInt(kvList.getValue("Systolic"));
						System.out.println("Ger user latest support data");
						System.out.println("dias: " + userSensorData.getDias());
						System.out.println("syst: "+userSensorData.getSyst());
					}catch (Exception e){}
					break;
				case "Temp":
					try {
						userSensorData.Temp = Double.parseDouble(kvList.getValue("Temp"));
						System.out.println("Ger user latest support data");
						System.out.println("temp: " + userSensorData.getTemp());
					}catch (Exception e){}
					break;
			}
			break;
		case "Alert":
			switch (sender) {
			case "BloodPressure":
				switch (purpose) {
				case "BloodPressureAlert":{
					System.out.println("BloodPressureToTempBloodPressure received, start processing...");
					System.out.println("Start to check the Slope of Temperature...n");
//					double tempSlopeAboutBP = calculateSlope(); //not functional...
					double tempSlopeAboutBP = 0;
					String alertMsgAboutBP = "Complex Alert!";

					String systString = kvList.getValue("Systolic");
					String diasString = kvList.getValue("Diastolic");
					int syst = 0, dias = 0;
					if (systString != null && !systString.equals(""))
					{
					    try
					    {
					        syst = Integer.parseInt(systString);
					        userSensorData.setSyst(syst);
					    }
					    catch(Exception e)
					    {
					        syst = 0;
					        userSensorData.setSyst(-1);
					    }
					}

					if (diasString != null && !diasString.equals(""))
					{
					    try
					    {
					        dias = Integer.parseInt(diasString);
					        userSensorData.setDias(dias);
					    }
					    catch(Exception e)
					    {
					        dias = 0;
					        userSensorData.setDias(-1);
					    }
					}
					// 140/90, 120/80 this is for demo purposes
					if(syst > 100 || dias > 70)
					{
					    if(tempSlopeAboutBP > 0.2)
					    {
					        alertMsgAboutBP = "The Patient's Blood Pressure is too high, it is possible because of the high rate of temperature increasing! please check the temperature!!!";
					    }
					    if(tempSlopeAboutBP < -0.2)
					    {
					        alertMsgAboutBP = "The Patient's Blood Pressure is too high. it is possible because of the high rate of temperature decreasing! please check the temperature!!! ";
					    }
					}
					else if(syst < 70 || dias < 50)
					{
					    if(tempSlopeAboutBP > 0.2)
					    {
					        alertMsgAboutBP = "The Patient's Blood Pressure is too low, it is possible because of the high rate of temperature increasing! please check the temperature!!!";
					    }
					    if(tempSlopeAboutBP < -0.2)
					    {
					        alertMsgAboutBP = "The Patient's Blood Pressure is too low. it is possible because of the high rate of temperature decreasing! please check the temperature!!! ";
					    }
					}

					if(tempSlopeAboutBP > 0.2 || tempSlopeAboutBP < -0.2)
					{
					    System.out.println("========= Send out Emergency message =========");

					    emergency.putPair("MainComponent", "BloodPressure");
					    emergency.putPair("AuxComponents", "Temp");
					    emergency.putPair("Note", alertMsgAboutBP);
					    emergency.putPair("Date", System.currentTimeMillis() + "");

					    encoder.sendMsg(emergency);
					}

					break;
				}
				}
				break;
			case "Temp":
				switch (purpose) {
				case "TempAlert":{
					System.out.println("TemptoTempBloodPressure received, start processing...");
					String date = kvList.getValue("Date");
					String temp = kvList.getValue("Temp");
					if(temp != null && !temp.trim().equals("")){
						try {
							userSensorData.setTemp(Double.parseDouble(temp));
						}catch (Exception e){
							userSensorData.setTemp(-1);
						}

					}
					System.out.println("The temp is " + temp);
					System.out.println("The date is " + date);

					break;
				}
				}
				break;
			case "Gesture":
				switch (purpose) {
					case "GestureAlert":{
						System.out.println("Detected gesture signal indicating user needs help");

						try {
							long date = Long.parseLong(kvList.getValue("Date"));
							if(date>TTLforVisit){
								TTLforVisit = date + 1000*5;	//second Alert within 2 minutes will become a EmergencyCase: UserNeedVisit, 5seconds for demo
								System.out.println("========= Send out Emergency message =========");
								emergency.putPair("Receiver","Uploader");
								emergency.putPair("EmergencyCase", "UserNeedHelp");
								emergency.putPair("SupportDataTemp", userSensorData.getTemp()+"");
								emergency.putPair("SupportDataBP", userSensorData.getSyst()+"/"+userSensorData.getDias());
								emergency.putPair("Date", date+"");
								encoder.sendMsg(emergency);
								System.out.println("==== Emergency sent ====");
								System.out.println(emergency.toString());
								System.out.println("========================");
							}else{
								System.out.println("========= Send out Emergency message =========");
								emergency.putPair("Receiver","Uploader");
								emergency.putPair("EmergencyCase", "UserNeedVisit");
								emergency.putPair("SupportDataTemp", userSensorData.getTemp()+"");
								emergency.putPair("SupportDataBP", userSensorData.getSyst()+"/"+userSensorData.getDias());
								emergency.putPair("Date", date+"");
								encoder.sendMsg(emergency);
								System.out.println("==== Emergency sent ====");
								System.out.println(emergency.toString());
								System.out.println("========================");
							}

						}catch (Exception e){
							System.err.println(e.getMessage());
						}
					}
				}

			}
			break;
		case "Confirm":
			System.out.println("Connect to SISServer successful.");
			break;
		case "Setting":
			if (receiver.equals(NAME)) {
				switch (purpose) {

				case "Kill":
					System.exit(0);
					break;
				}
			}
			break;
		}
	}


	// The following function is used to calculate the slope of temperature
	public static double calculateSlope() throws IOException
	{
	    String fileName = "temperatureRecord.csv";
	    BufferedReader br  = new BufferedReader(new FileReader(fileName));

	    double tempSlope = 0.0;

	    String temp;
	    while((temp = br.readLine()) != null)
	    {
	        String[] str = temp.split(",");
	        if(tempRecord.size() <= 20)
	        {
	            double newEntry = Double.parseDouble(str[1]);
	            tempRecord.add(newEntry);
	        }
	        else
	        {
	            tempRecord.remove(0);
	            double newEntry = Double.parseDouble(str[1]);
	            tempRecord.add(newEntry);
	        }
	    }
	    System.out.println();
	    System.out.print("The twenty minute temperature record are as follows: ");
	    System.out.println(tempRecord);
	    System.out.println();
	    Collections.sort(tempRecord);
	    double min = tempRecord.get(0);
	    double max = tempRecord.get(tempRecord.size() - 1);
	    tempSlope = (max - min) / max;
	    System.out.printf("tempSlope is %.2f", tempSlope);
	    System.out.println("n");

	    return tempSlope;
	}

	public static class UserSensorData{
		private double Temp;
		private int syst;
		private int dias;
		public UserSensorData() {
			this.Temp = -1;
			this.syst = -1;
			this.dias = -1;
		}

		public double getTemp() {
			return Temp;
		}

		public void setTemp(double temp) {
			Temp = temp;
		}

		public int getSyst() {
			return syst;
		}

		public void setSyst(int syst) {
			this.syst = syst;
		}

		public int getDias() {
			return dias;
		}

		public void setDias(int dias) {
			this.dias = dias;
		}

		@Override
		public String toString() {
			return "UserSensorData{" +
					"Temp=" + Temp +
					", syst=" + syst +
					", dias=" + dias +
					'}';
		}
	}
}


